
set( TEST_LIBRARIES dbus-cxx ${dbus_LIBRARIES} ${sigc_LIBRARIES} )
find_library( LIBRT rt )
if( LIBRT )
	set( TEST_LIBRARIES ${TEST_LIBRARIES} ${LIBRT} )
endif( LIBRT )

link_directories( ${CMAKE_BINARY_DIR} )

include_directories( ${CMAKE_SOURCE_DIR}/dbus-cxx
    ${CMAKE_BINARY_DIR}/dbus-cxx 
    ${dbus_INCLUDE_DIRS} 
    ${sigc_INCLUDE_DIRS} )

add_executable( test-callmessage callmessagetests.cpp )
target_link_libraries( test-callmessage ${TEST_LIBRARIES} )
target_include_directories( test-callmessage PUBLIC ${CMAKE_SOURCE_DIR} )
target_include_directories( test-callmessage PUBLIC ${CMAKE_CURRENT_BINARY_DIR} )

add_test( NAME Callmessage-Bool COMMAND test-callmessage bool)
add_test( NAME Callmessage-Byte COMMAND test-callmessage byte)
add_test( NAME Callmessage-int16 COMMAND test-callmessage int16)
add_test( NAME Callmessage-uint16 COMMAND test-callmessage uint16)
add_test( NAME Callmessage-int32 COMMAND test-callmessage int32)
add_test( NAME Callmessage-uint32 COMMAND test-callmessage uint32)
add_test( NAME Callmessage-int64 COMMAND test-callmessage int64)
add_test( NAME Callmessage-uint64 COMMAND test-callmessage uint64)
add_test( NAME Callmessage-double COMMAND test-callmessage double)
add_test( NAME Callmessage-cstring COMMAND test-callmessage cstring)
add_test( NAME Callmessage-string COMMAND test-callmessage string)
add_test( NAME Callmessage-array_double COMMAND test-callmessage array_double)
add_test( NAME Callmessage-multiple COMMAND test-callmessage multiple)

add_executable( test-messageiterator messageiteratortests.cpp )
target_link_libraries( test-messageiterator ${TEST_LIBRARIES} )
target_include_directories( test-messageiterator PUBLIC ${CMAKE_SOURCE_DIR} )
target_include_directories( test-messageiterator PUBLIC ${CMAKE_CURRENT_BINARY_DIR} )

add_test( NAME messageiterator-Bool COMMAND test-messageiterator bool)
add_test( NAME messageiterator-Byte COMMAND test-messageiterator byte)
add_test( NAME messageiterator-int16 COMMAND test-messageiterator int16)
add_test( NAME messageiterator-uint16 COMMAND test-messageiterator uint16)
add_test( NAME messageiterator-int32 COMMAND test-messageiterator int32)
add_test( NAME messageiterator-uint32 COMMAND test-messageiterator uint32)
add_test( NAME messageiterator-int64 COMMAND test-messageiterator int64)
add_test( NAME messageiterator-uint64 COMMAND test-messageiterator uint64)
add_test( NAME messageiterator-double COMMAND test-messageiterator double)
add_test( NAME messageiterator-cstring COMMAND test-messageiterator cstring)
add_test( NAME messageiterator-string COMMAND test-messageiterator string)
add_test( NAME messageiterator-signature COMMAND test-messageiterator signature)
add_test( NAME messageiterator-char COMMAND test-messageiterator char)
add_test( NAME messageiterator-int8 COMMAND test-messageiterator int8)
add_test( NAME messageiterator-float COMMAND test-messageiterator float)
add_test( NAME messageiterator-long_int COMMAND test-messageiterator long_int)
add_test( NAME messageiterator-unsigned_long_int COMMAND test-messageiterator unsigned_long_int)
add_test( NAME messageiterator-array_int COMMAND test-messageiterator array_int)
add_test( NAME messageiterator-array_string COMMAND test-messageiterator array_string)
add_test( NAME messageiterator-array_array_string COMMAND test-messageiterator array_array_string)
add_test( NAME messageiterator-filedescriptor COMMAND test-messageiterator filedescriptor)
add_test( NAME messageiterator-multiple COMMAND test-messageiterator multiple)

add_test( NAME messageiterator-Bool2 COMMAND test-messageiterator bool-2)
add_test( NAME messageiterator-Byte2 COMMAND test-messageiterator byte-2)
add_test( NAME messageiterator-int16-2 COMMAND test-messageiterator int16-2)
add_test( NAME messageiterator-uint16-2 COMMAND test-messageiterator uint16-2)
add_test( NAME messageiterator-int32-2 COMMAND test-messageiterator int32-2)
add_test( NAME messageiterator-uint32-2 COMMAND test-messageiterator uint32-2)
add_test( NAME messageiterator-int64-2 COMMAND test-messageiterator int64-2)
add_test( NAME messageiterator-uint64-2 COMMAND test-messageiterator uint64-2)
add_test( NAME messageiterator-double-2 COMMAND test-messageiterator double-2)
add_test( NAME messageiterator-cstring-2 COMMAND test-messageiterator cstring-2)
add_test( NAME messageiterator-string-2 COMMAND test-messageiterator string-2)
add_test( NAME messageiterator-signature-2 COMMAND test-messageiterator signature-2)
add_test( NAME messageiterator-char-2 COMMAND test-messageiterator char-2)
add_test( NAME messageiterator-int8-2 COMMAND test-messageiterator int8-2)
add_test( NAME messageiterator-float-2 COMMAND test-messageiterator float-2)
add_test( NAME messageiterator-long_int-2 COMMAND test-messageiterator long_int-2)
add_test( NAME messageiterator-unsigned_long_int-2 COMMAND test-messageiterator unsigned_long_int-2)
add_test( NAME messageiterator-array_int-2 COMMAND test-messageiterator array_int-2)
add_test( NAME messageiterator-array_string-2 COMMAND test-messageiterator array_string-2)
add_test( NAME messageiterator-filedescriptor-2 COMMAND test-messageiterator filedescriptor-2)
add_test( NAME messageiterator-multiple-2 COMMAND test-messageiterator multiple-2)

add_executable( test-path pathclasstests.cpp )
target_link_libraries( test-path ${TEST_LIBRARIES} )
target_include_directories( test-path PUBLIC ${CMAKE_SOURCE_DIR} )
target_include_directories( test-path PUBLIC ${CMAKE_CURRENT_BINARY_DIR} )

add_test( NAME path-valid COMMAND test-path test_valid)
add_test( NAME path-invalid-chars COMMAND test-path test_invalid_characters)
add_test( NAME path-invalid-trail-slash COMMAND test-path test_invalid_trailing_slash)
add_test( NAME path-invalid-empty-path COMMAND test-path test_invalid_empty_path)
add_test( NAME path-invalid-double-slash COMMAND test-path test_invalid_double_slash)
add_test( NAME path-invalid-mising-lead-slash COMMAND test-path test_invalid_missing_leading_slash)
add_test( NAME path-decompose-valid COMMAND test-path decompose_valid)
add_test( NAME path-decompose-root COMMAND test-path decompose_root)
add_test( NAME path-decompose-invalid COMMAND test-path decompose_invalid)
add_test( NAME path-decompose-empty COMMAND test-path decompose_empty)
add_test( NAME path-append-valid COMMAND test-path append_valid)
add_test( NAME path-append-valid-mult COMMAND test-path append_valid_multiple)
add_test( NAME path-append-valid-lead-slash COMMAND test-path append_valid_leading_slash)
add_test( NAME path-append-valid-trail-slash COMMAND test-path append_valid_trailing_slash)
add_test( NAME path-append-invalid-empty COMMAND test-path append_invalid_empty)
add_test( NAME path-append-invalid-chars COMMAND test-path append_invalid_empty)
add_test( NAME path-append-invalid-double_slash COMMAND test-path append_invalid_double_slash)
add_test( NAME path-append-invalid-root COMMAND test-path append_invalid_root)

add_executable( test-connection connectiontests.cpp )
target_link_libraries( test-connection ${TEST_LIBRARIES} )
target_include_directories( test-connection PUBLIC ${CMAKE_SOURCE_DIR} )
target_include_directories( test-connection PUBLIC ${CMAKE_CURRENT_BINARY_DIR} )

configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/dbus-wrapper.sh ${CMAKE_CURRENT_BINARY_DIR}/dbus-wrapper.sh COPYONLY)
add_test( NAME connection-proxy-create1 COMMAND dbus-wrapper.sh test-connection create_signal_proxy)
add_test( NAME connection-proxy-get-iface COMMAND dbus-wrapper.sh test-connection get_signal_proxy_by_iface)
add_test( NAME connection-proxy-get-iface-name COMMAND dbus-wrapper.sh test-connection get_signal_proxy_by_iface_and_name)

#
# Object Tests
#
add_executable( object-tests objecttests.cpp )
target_link_libraries( object-tests ${TEST_LIBRARIES} )
target_include_directories( object-tests PUBLIC ${CMAKE_SOURCE_DIR} )
target_include_directories( object-tests PUBLIC ${CMAKE_CURRENT_BINARY_DIR} )

add_test( NAME create-object-proxy COMMAND dbus-wrapper.sh object-tests proxy_create)
add_test( NAME object-proxy-create-method COMMAND dbus-wrapper.sh object-tests proxy_create_method1)
add_test( NAME export-method COMMAND dbus-wrapper.sh object-tests export_method)

#
# Data Sending tests - make sure we can actually send data across the bus correctly
#
configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/dbus-wrapper-data-tests.sh ${CMAKE_CURRENT_BINARY_DIR}/dbus-wrapper-data-tests.sh COPYONLY)
add_executable( data-tests datatests.cpp )
target_link_libraries( data-tests ${TEST_LIBRARIES} )
target_include_directories( data-tests PUBLIC ${CMAKE_SOURCE_DIR} )
target_include_directories( data-tests PUBLIC ${CMAKE_CURRENT_BINARY_DIR} )

add_test( NAME send-integers COMMAND dbus-wrapper-data-tests.sh send_integers)
add_test( NAME call-void-method COMMAND dbus-wrapper-data-tests.sh void_method)

#
# Signal tests - make sure we can tx and rx singals correctly
add_executable( signal-tests signaltests.cpp )
target_link_libraries( signal-tests ${TEST_LIBRARIES} )
target_include_directories( signal-tests PUBLIC ${CMAKE_SOURCE_DIR} )
target_include_directories( signal-tests PUBLIC ${CMAKE_CURRENT_BINARY_DIR} )

add_test( NAME create-signal COMMAND dbus-wrapper.sh signal-tests create)
add_test( NAME signal-tx-rx COMMAND dbus-wrapper.sh signal-tests tx_rx)
